'use client';

import { useState, useEffect, use } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '../../../../contexts/AuthContext';
import { toast } from 'react-hot-toast';
import { ArrowLeft, Save, Upload, Instagram, MessageCircle, Music, Youtube, Settings } from 'lucide-react';
import Image from 'next/image';
import MobileImageUpload from '../../../../components/ui/mobile-image-upload';
import ProtectedRoute from '../../../../components/auth/ProtectedRoute';
import LottieLoader from '../../../../components/ui/lottie-loader';
import AdminHeader from '../../../../components/ui/admin-header';
import loadingAnimation from '../../../../../public/animations/loading-dots-blue.json';

interface Store {
  id: string;
  name: string;
  store_name: string;
  slug: string;
  description: string;
  logo: string;
  colors: {
    primary: string;
    secondary: string;
    accent: string;
  };
  social_networks: {
    instagram?: string;
    whatsapp?: string;
    tiktok?: string;
    spotify?: string;
    youtube?: string;
  };
  user_id: string;
}

export default function StoreSettingsPage({ params }: { params: Promise<{ slug: string }> }) {
  const [store, setStore] = useState<Store | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [uploadingLogo, setUploadingLogo] = useState(false);
  
  const [formData, setFormData] = useState({
    name: '',
    slug: '',
    description: '',
    logo: '',
    colors: {
      primary: '#8B5CF6',
      secondary: '#7C3AED',
      accent: '#A855F7'
    },
    social_networks: {
      instagram: '',
      whatsapp: '',
      tiktok: '',
      spotify: '',
      youtube: ''
    }
  });

  // Cores pré-definidas
  const predefinedColors = [
    {
      name: 'Roxo Elegante',
      primary: '#8B5CF6',
      secondary: '#7C3AED',
      accent: '#A855F7'
    },
    {
      name: 'Azul Profissional',
      primary: '#3B82F6',
      secondary: '#1D4ED8',
      accent: '#60A5FA'
    },
    {
      name: 'Verde Natureza',
      primary: '#10B981',
      secondary: '#059669',
      accent: '#34D399'
    },
    {
      name: 'Rosa Moderno',
      primary: '#EC4899',
      secondary: '#BE185D',
      accent: '#F472B6'
    },
    {
      name: 'Laranja Energia',
      primary: '#F97316',
      secondary: '#EA580C',
      accent: '#FB923C'
    },
    {
      name: 'Vermelho Clássico',
      primary: '#EF4444',
      secondary: '#DC2626',
      accent: '#F87171'
    }
  ];

  const { user } = useAuth();
  const router = useRouter();
  const { slug } = use(params);

  useEffect(() => {
    if (user) {
      loadStore();
    }
  }, [user]);

  const loadStore = async () => {
    try {
      const response = await fetch(`/api/stores/${slug}`);
      if (!response.ok) {
        toast.error('Loja não encontrada');
        router.push('/create-store');
        return;
      }
      
      const storeData = await response.json();
      
      // Verificar se o usuário é dono da loja
      if (storeData.user_id !== user?.id) {
        toast.error('Você não tem permissão para acessar esta loja');
        router.push('/');
        return;
      }

      setStore(storeData);
      setFormData({
        name: storeData.name || '',
        slug: storeData.slug || '',
        description: storeData.description || '',
        logo: storeData.logo || '',
        colors: storeData.colors || {
          primary: '#8B5CF6',
          secondary: '#7C3AED',
          accent: '#A855F7'
        },
        social_networks: {
          instagram: storeData.social_networks?.instagram || '',
          whatsapp: storeData.social_networks?.whatsapp || '',
          tiktok: storeData.social_networks?.tiktok || '',
          spotify: storeData.social_networks?.spotify || '',
          youtube: storeData.social_networks?.youtube || ''
        }
      });
    } catch (error) {
      console.error('Erro ao carregar loja:', error);
      toast.error('Erro ao carregar dados da loja');
    } finally {
      setLoading(false);
    }
  };

  const handleLogoUpload = async (file: File) => {
    setUploadingLogo(true);
    try {
      const formData = new FormData();
      formData.append('image', file);

      const response = await fetch('/api/upload-image', {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        const data = await response.json();
        setFormData(prev => ({ ...prev, logo: data.imageUrl }));
        toast.success('Logo enviada com sucesso!');
      } else {
        throw new Error('Erro ao enviar logo');
      }
    } catch (error) {
      console.error('Erro ao enviar logo:', error);
      toast.error('Erro ao enviar logo');
    } finally {
      setUploadingLogo(false);
    }
  };

  const handleSave = async () => {
    // Validações
    if (!formData.name.trim()) {
      toast.error('Nome da loja é obrigatório');
      return;
    }

    if (!formData.social_networks.whatsapp.trim()) {
      toast.error('WhatsApp é obrigatório');
      return;
    }

    setSaving(true);
    try {
      const response = await fetch(`/api/stores/${slug}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (response.ok) {
        toast.success('Configurações salvas com sucesso!');
        await loadStore(); // Recarregar dados
      } else {
        const error = await response.json();
        toast.error(error.error || 'Erro ao salvar configurações');
      }
    } catch (error) {
      console.error('Erro ao salvar:', error);
      toast.error('Erro ao salvar configurações');
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return (
      <ProtectedRoute>
        <div className="min-h-screen bg-gray-50 flex items-center justify-center">
          <LottieLoader animationData={loadingAnimation} text="Carregando..." />
        </div>
      </ProtectedRoute>
    );
  }

  return (
    <ProtectedRoute>
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-violet-50">
        {store && (
          <AdminHeader
            store={store}
            currentPage="store"
            title="Configurações da Loja"
            subtitle="Gerencie as informações da sua loja"
            icon={Settings}
          />
        )}

        {/* Content */}
        <div className="max-w-7xl mx-auto px-4 py-8">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Coluna Esquerda - Formulário */}
            <div className="bg-white rounded-xl shadow-sm border p-6 space-y-8">
              {/* Botão Salvar */}
              <div className="flex justify-end">
                <button
                  onClick={handleSave}
                  disabled={saving}
                  className="px-6 py-2 text-white rounded-lg transition-colors disabled:opacity-50 flex items-center space-x-2"
                  style={{ 
                    backgroundColor: store?.colors.primary || '#8B5CF6',
                    opacity: saving ? 0.5 : 1
                  }}
                  onMouseEnter={(e) => {
                    if (!saving && store) {
                      e.currentTarget.style.backgroundColor = store.colors.secondary;
                    }
                  }}
                  onMouseLeave={(e) => {
                    if (!saving && store) {
                      e.currentTarget.style.backgroundColor = store.colors.primary;
                    }
                  }}
                >
                  <Save className="w-4 h-4" />
                  <span>{saving ? 'Salvando...' : 'Salvar'}</span>
                </button>
              </div>
              
              {/* Informações Básicas */}
              <div>
                <h2 className="text-lg font-semibold text-gray-900 mb-4">Informações Básicas</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Nome da Loja *
                  </label>
                  <input
                    type="text"
                    value={formData.name}
                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    placeholder="Nome da sua loja"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    URL da Loja
                  </label>
                  <input
                    type="text"
                    value={formData.slug}
                    disabled
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-500"
                    placeholder="URL da loja"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    A URL não pode ser alterada após a criação
                  </p>
                </div>
                
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descrição
                  </label>
                  <textarea
                    value={formData.description}
                    onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                    rows={3}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    placeholder="Descreva sua loja..."
                  />
                </div>
              </div>
            </div>

            {/* Logo */}
            <div>
              <h2 className="text-lg font-semibold text-gray-900 mb-4">Logo da Loja</h2>
              <div className="flex items-center space-x-6">
                <div className="w-24 h-24 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center">
                  {formData.logo ? (
                    <Image
                      src={formData.logo}
                      alt="Logo"
                      width={96}
                      height={96}
                      className="object-cover w-full h-full"
                    />
                  ) : (
                    <Upload className="w-8 h-8 text-gray-400" />
                  )}
                </div>
                <div className="flex-1">
                  <MobileImageUpload
                    onImageSelect={handleLogoUpload}
                    currentImage={formData.logo}
                    disabled={uploadingLogo}
                    loading={uploadingLogo}
                  />
                </div>
              </div>
            </div>

            {/* Cores */}
            <div>
              <h2 className="text-lg font-semibold text-gray-900 mb-4">Cores da Loja</h2>
              
              {/* Cores Pré-definidas */}
              <div className="mb-6">
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  Escolha um tema pré-definido
                </label>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                  {predefinedColors.map((theme, index) => (
                    <button
                      key={index}
                      onClick={() => setFormData(prev => ({
                        ...prev,
                        colors: {
                          primary: theme.primary,
                          secondary: theme.secondary,
                          accent: theme.accent
                        }
                      }))}
                      className="p-3 border-2 rounded-lg hover:border-purple-500 transition-colors text-left"
                      style={{
                        borderColor: formData.colors.primary === theme.primary ? '#8B5CF6' : '#E5E7EB'
                      }}
                    >
                      <div className="flex items-center space-x-2 mb-2">
                        <div className="w-4 h-4 rounded-full" style={{ backgroundColor: theme.primary }}></div>
                        <div className="w-4 h-4 rounded-full" style={{ backgroundColor: theme.secondary }}></div>
                        <div className="w-4 h-4 rounded-full" style={{ backgroundColor: theme.accent }}></div>
                      </div>
                      <p className="text-sm font-medium text-gray-900">{theme.name}</p>
                    </button>
                  ))}
                </div>
              </div>

              {/* Cores Personalizadas */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Cor Primária
                  </label>
                  <div className="flex space-x-2">
                    <input
                      type="color"
                      value={formData.colors.primary}
                      onChange={(e) => setFormData(prev => ({
                        ...prev,
                        colors: { ...prev.colors, primary: e.target.value }
                      }))}
                      className="w-12 h-10 border border-gray-300 rounded-lg"
                    />
                    <input
                      type="text"
                      value={formData.colors.primary}
                      onChange={(e) => setFormData(prev => ({
                        ...prev,
                        colors: { ...prev.colors, primary: e.target.value }
                      }))}
                      className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    />
                  </div>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Cor Secundária
                  </label>
                  <div className="flex space-x-2">
                    <input
                      type="color"
                      value={formData.colors.secondary}
                      onChange={(e) => setFormData(prev => ({
                        ...prev,
                        colors: { ...prev.colors, secondary: e.target.value }
                      }))}
                      className="w-12 h-10 border border-gray-300 rounded-lg"
                    />
                    <input
                      type="text"
                      value={formData.colors.secondary}
                      onChange={(e) => setFormData(prev => ({
                        ...prev,
                        colors: { ...prev.colors, secondary: e.target.value }
                      }))}
                      className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    />
                  </div>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Cor de Destaque
                  </label>
                  <div className="flex space-x-2">
                    <input
                      type="color"
                      value={formData.colors.accent}
                      onChange={(e) => setFormData(prev => ({
                        ...prev,
                        colors: { ...prev.colors, accent: e.target.value }
                      }))}
                      className="w-12 h-10 border border-gray-300 rounded-lg"
                    />
                    <input
                      type="text"
                      value={formData.colors.accent}
                      onChange={(e) => setFormData(prev => ({
                        ...prev,
                        colors: { ...prev.colors, accent: e.target.value }
                      }))}
                      className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    />
                  </div>
                </div>
              </div>


            </div>

            {/* Redes Sociais */}
            <div>
              <h2 className="text-lg font-semibold text-gray-900 mb-4">Redes Sociais</h2>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    WhatsApp *
                  </label>
                  <div className="flex items-center space-x-2">
                    <MessageCircle className="w-5 h-5 text-green-600" />
                    <input
                      type="text"
                      value={formData.social_networks.whatsapp}
                      onChange={(e) => setFormData(prev => ({
                        ...prev,
                        social_networks: { ...prev.social_networks, whatsapp: e.target.value }
                      }))}
                      className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      placeholder="(11) 99999-9999"
                    />
                  </div>
                  <p className="text-xs text-gray-500 mt-1">
                    Número do WhatsApp para contato com clientes
                  </p>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Instagram
                  </label>
                  <div className="flex items-center space-x-2">
                    <Instagram className="w-5 h-5 text-pink-600" />
                    <input
                      type="text"
                      value={formData.social_networks.instagram}
                      onChange={(e) => setFormData(prev => ({
                        ...prev,
                        social_networks: { ...prev.social_networks, instagram: e.target.value }
                      }))}
                      className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      placeholder="@seuinstagram"
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    TikTok
                  </label>
                  <div className="flex items-center space-x-2">
                    <svg className="w-5 h-5 text-black" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12.525.02c1.31-.02 2.61-.01 3.91-.02.08 1.53.63 3.09 1.75 4.17 1.12 1.11 2.7 1.62 4.24 1.79v4.03c-1.44-.05-2.89-.35-4.2-.97-.57-.26-1.1-.59-1.62-.93-.01 2.92.01 5.84-.02 8.75-.08 1.4-.54 2.79-1.35 3.94-1.31 1.92-3.58 3.17-5.91 3.21-1.43.08-2.86-.31-4.08-1.03-2.02-1.19-3.44-3.37-3.65-5.71-.02-.5-.03-1-.01-1.49.18-1.9 1.12-3.72 2.58-4.96 1.66-1.44 3.98-2.13 6.15-1.72.02 1.48-.04 2.96-.04 4.44-.99-.32-2.15-.23-3.02.37-.63.41-1.11 1.04-1.36 1.75-.21.51-.15 1.07-.14 1.61.24 1.64 1.82 3.02 3.5 2.87 1.12-.01 2.19-.66 2.77-1.61.19-.33.4-.67.41-1.06.1-1.79.06-3.57.07-5.36.01-4.03-.01-8.05.02-12.07z"/>
                    </svg>
                    <input
                      type="text"
                      value={formData.social_networks.tiktok}
                      onChange={(e) => setFormData(prev => ({
                        ...prev,
                        social_networks: { ...prev.social_networks, tiktok: e.target.value }
                      }))}
                      className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      placeholder="@seutiktok"
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Spotify
                  </label>
                  <div className="flex items-center space-x-2">
                    <Music className="w-5 h-5 text-green-600" />
                    <input
                      type="text"
                      value={formData.social_networks.spotify}
                      onChange={(e) => setFormData(prev => ({
                        ...prev,
                        social_networks: { ...prev.social_networks, spotify: e.target.value }
                      }))}
                      className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      placeholder="Link do seu perfil Spotify"
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    YouTube
                  </label>
                  <div className="flex items-center space-x-2">
                    <Youtube className="w-5 h-5 text-red-600" />
                    <input
                      type="text"
                      value={formData.social_networks.youtube}
                      onChange={(e) => setFormData(prev => ({
                        ...prev,
                        social_networks: { ...prev.social_networks, youtube: e.target.value }
                      }))}
                      className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      placeholder="@seucanal"
                    />
                  </div>
                </div>
              </div>
            </div>

            {/* Coluna Direita - Preview da Vitrine */}
            <div className="bg-white rounded-xl shadow-sm border p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-6">Preview da sua Vitrine</h2>
              
              {/* Preview da página da loja */}
              <div className="border border-gray-200 rounded-lg overflow-hidden">
                {/* Header da vitrine */}
                <div 
                  className="h-32 flex items-center justify-center text-white font-bold text-xl relative"
                  style={{ 
                    background: `linear-gradient(135deg, ${formData.colors.primary}, ${formData.colors.secondary})`
                  }}
                >
                  {/* Logo */}
                  {formData.logo && (
                    <div className="absolute left-4 top-4">
                      <Image
                        src={formData.logo}
                        alt="Logo"
                        width={40}
                        height={40}
                        className="rounded-full"
                      />
                    </div>
                  )}
                  
                  {/* Nome da loja */}
                  <div className="text-center">
                    <h1 className="text-2xl font-bold">{formData.name || 'Nome da Loja'}</h1>
                    {formData.description && (
                      <p className="text-sm opacity-90 mt-1">{formData.description}</p>
                    )}
                  </div>
                </div>

                {/* Conteúdo da vitrine */}
                <div className="p-6 bg-gray-50">
                  {/* Botões de ação */}
                  <div className="flex flex-col sm:flex-row gap-3 mb-6">
                    <button 
                      className="px-6 py-3 text-white rounded-lg font-medium flex items-center justify-center space-x-2"
                      style={{ backgroundColor: formData.colors.accent }}
                    >
                      <span>Ver Catálogo</span>
                    </button>
                    
                    {formData.social_networks.whatsapp && (
                      <button 
                        className="px-6 py-3 text-white rounded-lg font-medium flex items-center justify-center space-x-2"
                        style={{ backgroundColor: formData.colors.primary }}
                      >
                        <MessageCircle className="w-4 h-4" />
                        <span>Fale Conosco</span>
                      </button>
                    )}
                  </div>

                  {/* Redes sociais */}
                  <div className="flex justify-center space-x-3">
                    {formData.social_networks.instagram && (
                      <div className="w-10 h-10 rounded-full flex items-center justify-center" style={{ backgroundColor: formData.colors.primary }}>
                        <Instagram className="w-5 h-5 text-white" />
                      </div>
                    )}
                    {formData.social_networks.whatsapp && (
                      <div className="w-10 h-10 rounded-full flex items-center justify-center" style={{ backgroundColor: formData.colors.secondary }}>
                        <MessageCircle className="w-5 h-5 text-white" />
                      </div>
                    )}
                    {formData.social_networks.tiktok && (
                      <div className="w-10 h-10 rounded-full flex items-center justify-center" style={{ backgroundColor: formData.colors.accent }}>
                        <svg className="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M12.525.02c1.31-.02 2.61-.01 3.91-.02.08 1.53.63 3.09 1.75 4.17 1.12 1.11 2.7 1.62 4.24 1.79v4.03c-1.44-.05-2.89-.35-4.2-.97-.57-.26-1.1-.59-1.62-.93-.01 2.92.01 5.84-.02 8.75-.08 1.4-.54 2.79-1.35 3.94-1.31 1.92-3.58 3.17-5.91 3.21-1.43.08-2.86-.31-4.08-1.03-2.02-1.19-3.44-3.37-3.65-5.71-.02-.5-.03-1-.01-1.49.18-1.9 1.12-3.72 2.58-4.96 1.66-1.44 3.98-2.13 6.15-1.72.02 1.48-.04 2.96-.04 4.44-.99-.32-2.15-.23-3.02.37-.63.41-1.11 1.04-1.36 1.75-.21.51-.15 1.07-.14 1.61.24 1.64 1.82 3.02 3.5 2.87 1.12-.01 2.19-.66 2.77-1.61.19-.33.4-.67.41-1.06.1-1.79.06-3.57.07-5.36.01-4.03-.01-8.05.02-12.07z"/>
                        </svg>
                      </div>
                    )}
                    {formData.social_networks.spotify && (
                      <div className="w-10 h-10 rounded-full flex items-center justify-center" style={{ backgroundColor: formData.colors.primary }}>
                        <Music className="w-5 h-5 text-white" />
                      </div>
                    )}
                    {formData.social_networks.youtube && (
                      <div className="w-10 h-10 rounded-full flex items-center justify-center" style={{ backgroundColor: formData.colors.secondary }}>
                        <Youtube className="w-5 h-5 text-white" />
                      </div>
                    )}
                  </div>

                  {/* Informações das cores */}
                  <div className="mt-6 p-4 bg-white rounded-lg border">
                    <h3 className="text-sm font-medium text-gray-900 mb-3">Cores da sua loja:</h3>
                    <div className="flex space-x-2 mb-3">
                      <div 
                        className="w-8 h-8 rounded-full flex items-center justify-center text-white text-xs font-bold"
                        style={{ backgroundColor: formData.colors.primary }}
                      >
                        P
                      </div>
                      <div 
                        className="w-8 h-8 rounded-full flex items-center justify-center text-white text-xs font-bold"
                        style={{ backgroundColor: formData.colors.secondary }}
                      >
                        S
                      </div>
                      <div 
                        className="w-8 h-8 rounded-full flex items-center justify-center text-white text-xs font-bold"
                        style={{ backgroundColor: formData.colors.accent }}
                      >
                        D
                      </div>
                    </div>
                    <div className="text-xs text-gray-600 space-y-1">
                      <p>Primária: {formData.colors.primary}</p>
                      <p>Secundária: {formData.colors.secondary}</p>
                      <p>Destaque: {formData.colors.accent}</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </ProtectedRoute>
  );
}